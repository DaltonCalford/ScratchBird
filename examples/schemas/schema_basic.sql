/*
 * ScratchBird v0.5.0 - Basic Schema Operations
 * 
 * This example demonstrates basic hierarchical schema operations
 * including creation, usage, and navigation.
 * 
 * Features demonstrated:
 * - Basic schema creation
 * - Schema context switching
 * - Object creation in schemas
 * - Schema-qualified names
 * 
 * The contents of this file are subject to the Initial
 * Developer's Public License Version 1.0 (the "License");
 * you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 * http://www.ibphoenix.com/main.nfs?a=ibphoenix&page=ibp_idpl.
 * 
 * Software distributed under the License is distributed AS IS,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied.
 * See the License for the specific language governing rights
 * and limitations under the License.
 * 
 * The Original Code was created by ScratchBird Development Team
 * for the ScratchBird Open Source RDBMS project.
 * 
 * Copyright (c) 2025 ScratchBird Development Team
 * and all contributors signed below.
 * 
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 */

-- Connect to database (assumes ScratchBird is running on default port 4050)
-- sb_isql -user SYSDBA -password masterkey -database localhost:employee.fdb

-- Enable SQL Dialect 4 for hierarchical schema support
SET SQL DIALECT 4;

-- ================================================================
-- Basic Schema Creation
-- ================================================================

-- Create a top-level schema
CREATE SCHEMA finance;

-- Create a nested schema (2 levels)
CREATE SCHEMA finance.accounting;

-- Create a deeper nested schema (3 levels)
CREATE SCHEMA finance.accounting.reports;

-- Display all schemas
SELECT 
    RDB$SCHEMA_NAME,
    RDB$PARENT_SCHEMA_NAME,
    RDB$SCHEMA_LEVEL,
    RDB$SCHEMA_PATH
FROM RDB$SCHEMAS
ORDER BY RDB$SCHEMA_LEVEL, RDB$SCHEMA_NAME;

-- ================================================================
-- Schema Context Operations
-- ================================================================

-- Show current schema context
SHOW SCHEMA;

-- Set working schema to finance
SET SCHEMA 'finance';
SHOW SCHEMA;

-- Set working schema to deeper level
SET SCHEMA 'finance.accounting';
SHOW SCHEMA;

-- Set working schema to deepest level
SET SCHEMA 'finance.accounting.reports';
SHOW SCHEMA;

-- ================================================================
-- Object Creation in Schemas
-- ================================================================

-- Create table in current schema (finance.accounting.reports)
CREATE TABLE monthly_summary (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    month_name VARCHAR(20),
    total_revenue DECIMAL(15,2),
    total_expenses DECIMAL(15,2),
    net_profit DECIMAL(15,2),
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert sample data
INSERT INTO monthly_summary (month_name, total_revenue, total_expenses, net_profit)
VALUES 
    ('January', 125000.00, 95000.00, 30000.00),
    ('February', 132000.00, 98000.00, 34000.00),
    ('March', 145000.00, 102000.00, 43000.00);

-- Query from current schema
SELECT * FROM monthly_summary;

-- Switch to parent schema
SET SCHEMA 'finance.accounting';

-- Create table in accounting schema
CREATE TABLE chart_of_accounts (
    account_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    account_code VARCHAR(20) NOT NULL,
    account_name VARCHAR(100) NOT NULL,
    account_type VARCHAR(20),
    parent_account_id INTEGER,
    is_active BOOLEAN DEFAULT TRUE
);

-- Insert sample chart of accounts
INSERT INTO chart_of_accounts (account_code, account_name, account_type)
VALUES 
    ('1000', 'Cash', 'Asset'),
    ('1100', 'Accounts Receivable', 'Asset'),
    ('2000', 'Accounts Payable', 'Liability'),
    ('3000', 'Owner Equity', 'Equity'),
    ('4000', 'Revenue', 'Revenue'),
    ('5000', 'Expenses', 'Expense');

-- ================================================================
-- Schema-Qualified Names
-- ================================================================

-- Query table using fully qualified name from any schema context
SELECT * FROM finance.accounting.reports.monthly_summary;

-- Query table using relative path from current schema (finance.accounting)
SELECT * FROM reports.monthly_summary;

-- Query table in current schema
SELECT * FROM chart_of_accounts;

-- ================================================================
-- Cross-Schema Queries
-- ================================================================

-- Join tables from different schema levels
SELECT 
    ms.month_name,
    ms.total_revenue,
    ms.total_expenses,
    ms.net_profit,
    coa.account_name
FROM finance.accounting.reports.monthly_summary ms
CROSS JOIN finance.accounting.chart_of_accounts coa
WHERE coa.account_type = 'Revenue'
ORDER BY ms.month_name;

-- ================================================================
-- Schema Information Queries
-- ================================================================

-- View schema hierarchy
SELECT 
    RDB$SCHEMA_NAME,
    RDB$PARENT_SCHEMA_NAME,
    RDB$SCHEMA_LEVEL,
    RDB$SCHEMA_PATH,
    RDB$CREATION_DATE
FROM RDB$SCHEMAS
WHERE RDB$SCHEMA_PATH LIKE 'finance%'
ORDER BY RDB$SCHEMA_LEVEL, RDB$SCHEMA_NAME;

-- Count objects in each schema
SELECT 
    s.RDB$SCHEMA_NAME,
    s.RDB$SCHEMA_LEVEL,
    COUNT(r.RDB$RELATION_NAME) as TABLE_COUNT
FROM RDB$SCHEMAS s
LEFT JOIN RDB$RELATIONS r ON r.RDB$SCHEMA_NAME = s.RDB$SCHEMA_NAME
WHERE s.RDB$SCHEMA_PATH LIKE 'finance%'
GROUP BY s.RDB$SCHEMA_NAME, s.RDB$SCHEMA_LEVEL
ORDER BY s.RDB$SCHEMA_LEVEL;

-- ================================================================
-- Schema Navigation Examples
-- ================================================================

-- Reset to default schema
SET SCHEMA '';
SHOW SCHEMA;

-- Navigate through schema hierarchy
SET SCHEMA 'finance';
SHOW SCHEMA;

-- List tables in current schema
SELECT RDB$RELATION_NAME 
FROM RDB$RELATIONS 
WHERE RDB$SCHEMA_NAME = 'finance'
AND RDB$RELATION_TYPE = 0;

-- Move to deeper schema
SET SCHEMA 'finance.accounting';
SHOW SCHEMA;

-- List tables in current schema
SELECT RDB$RELATION_NAME 
FROM RDB$RELATIONS 
WHERE RDB$SCHEMA_NAME = 'finance.accounting'
AND RDB$RELATION_TYPE = 0;

-- Move to deepest schema
SET SCHEMA 'finance.accounting.reports';
SHOW SCHEMA;

-- List tables in current schema
SELECT RDB$RELATION_NAME 
FROM RDB$RELATIONS 
WHERE RDB$SCHEMA_NAME = 'finance.accounting.reports'
AND RDB$RELATION_TYPE = 0;

-- ================================================================
-- Schema Administration
-- ================================================================

-- Check schema existence
SELECT CASE 
    WHEN EXISTS (
        SELECT 1 FROM RDB$SCHEMAS 
        WHERE RDB$SCHEMA_NAME = 'finance.accounting.reports'
    ) THEN 'EXISTS'
    ELSE 'NOT FOUND'
END as SCHEMA_STATUS
FROM RDB$DATABASE;

-- Get schema metadata
SELECT 
    RDB$SCHEMA_NAME,
    RDB$PARENT_SCHEMA_NAME,
    RDB$SCHEMA_LEVEL,
    RDB$SCHEMA_PATH,
    RDB$CREATION_DATE,
    RDB$DESCRIPTION
FROM RDB$SCHEMAS
WHERE RDB$SCHEMA_NAME = 'finance.accounting.reports';

-- ================================================================
-- Cleanup (Optional)
-- ================================================================

-- Note: Uncomment the following lines to clean up the example

-- Drop tables (must be done in dependency order)
-- DROP TABLE finance.accounting.reports.monthly_summary;
-- DROP TABLE finance.accounting.chart_of_accounts;

-- Drop schemas (must be done from deepest to shallowest)
-- DROP SCHEMA finance.accounting.reports;
-- DROP SCHEMA finance.accounting;
-- DROP SCHEMA finance;

-- ================================================================
-- Summary
-- ================================================================

-- This example demonstrated:
-- 1. Basic schema creation with hierarchical structure
-- 2. Schema context switching with SET SCHEMA
-- 3. Object creation within schema contexts
-- 4. Schema-qualified name usage
-- 5. Cross-schema queries
-- 6. Schema information queries
-- 7. Schema navigation patterns
-- 8. Basic schema administration

-- Next steps:
-- - See schema_hierarchy.sql for deep nesting examples
-- - See schema_management.sql for advanced administration
-- - See schema_navigation.sql for complex navigation patterns