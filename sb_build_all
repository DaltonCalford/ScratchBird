#!/bin/bash

# ScratchBird v0.5.0 - Complete Build Script
# This script builds all ScratchBird utilities for multiple platforms and places them in release directories
# 
# Usage: ./sb_build_all [options]
# Options:
#   -h, --help          Show this help message
#   -c, --clean         Clean build directories before building
#   -l, --linux-only    Build only Linux utilities
#   -w, --windows-only  Build only Windows utilities
#   -v, --verbose       Verbose output
#   -j, --jobs N        Number of parallel jobs (default: number of CPU cores)
#
# Author: ScratchBird Development Team
# Version: 0.5.0
# Date: $(date +%Y-%m-%d)

set -e  # Exit on any error

# Configuration
SCRATCHBIRD_VERSION="0.5.0"
BUILD_VERSION="SB-T0.5.0.1 ScratchBird 0.5 f90eae0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BUILD_DIR="$SCRIPT_DIR/build_temp"
RELEASE_DIR="$SCRIPT_DIR/release/alpha0.5.0"
MODERN_UTILS_DIR="$SCRIPT_DIR/src/utilities/modern"

# Default options
CLEAN_BUILD=false
LINUX_ONLY=false
WINDOWS_ONLY=false
VERBOSE=false
JOBS=$(nproc)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_verbose() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${BLUE}[VERBOSE]${NC} $1"
    fi
}

# Help function
show_help() {
    cat << EOF
ScratchBird v${SCRATCHBIRD_VERSION} - Complete Build Script

This script builds all ScratchBird utilities for multiple platforms and places them
in the appropriate release directories.

USAGE:
    ./sb_build_all [OPTIONS]

OPTIONS:
    -h, --help          Show this help message
    -c, --clean         Clean build directories before building
    -l, --linux-only    Build only Linux utilities
    -w, --windows-only  Build only Windows utilities
    -v, --verbose       Enable verbose output
    -j, --jobs N        Number of parallel jobs (default: ${JOBS})

UTILITIES BUILT:
    Core Database Tools:
        - scratchbird       Main database server
        - sb_gbak          Backup/restore utility
        - sb_gfix          Database maintenance utility
        - sb_gsec          Security management utility
        - sb_gstat         Database statistics utility
        - sb_isql          Interactive SQL utility

    Advanced Tools:
        - sb_guard         Process monitor
        - sb_svcmgr        Service manager interface
        - sb_tracemgr      Database tracing management
        - sb_nbackup       Incremental backup utility
        - sb_gssplit       File splitting utility
        - sb_lock_print    Database lock analysis utility

PLATFORMS:
    - Linux x86_64 (native compilation)
    - Windows x64 (cross-compilation using MinGW)

OUTPUT DIRECTORIES:
    - ${RELEASE_DIR}/linux-x86_64/bin/
    - ${RELEASE_DIR}/windows-x64/bin/

REQUIREMENTS:
    - GCC 7.0+ with C++17 support
    - MinGW-w64 for Windows cross-compilation
    - CMake 3.10+ (for legacy build system)
    - Make

EXAMPLES:
    # Build all utilities for all platforms
    ./sb_build_all

    # Clean build with verbose output
    ./sb_build_all -c -v

    # Build only Linux utilities
    ./sb_build_all -l

    # Build only Windows utilities with 4 parallel jobs
    ./sb_build_all -w -j 4

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -c|--clean)
            CLEAN_BUILD=true
            shift
            ;;
        -l|--linux-only)
            LINUX_ONLY=true
            shift
            ;;
        -w|--windows-only)
            WINDOWS_ONLY=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -j|--jobs)
            JOBS="$2"
            shift 2
            ;;
        *)
            log_error "Unknown option: $1"
            echo "Use -h or --help for usage information"
            exit 1
            ;;
    esac
done

# Validate conflicting options
if [ "$LINUX_ONLY" = true ] && [ "$WINDOWS_ONLY" = true ]; then
    log_error "Cannot specify both --linux-only and --windows-only"
    exit 1
fi

# Check dependencies
check_dependencies() {
    log_info "Checking build dependencies..."
    
    # Check GCC
    if ! command -v gcc &> /dev/null; then
        log_error "GCC not found. Please install GCC 7.0+ with C++17 support"
        exit 1
    fi
    
    local gcc_version=$(gcc --version | head -n1 | grep -o '[0-9]\+\.[0-9]\+' | head -n1)
    log_verbose "Found GCC version: $gcc_version"
    
    # Check MinGW for Windows builds
    if [ "$WINDOWS_ONLY" = false ]; then
        if ! command -v x86_64-w64-mingw32-g++ &> /dev/null; then
            log_warning "MinGW-w64 not found. Windows builds will be skipped"
            WINDOWS_ONLY=false
            LINUX_ONLY=true
        else
            log_verbose "Found MinGW-w64 compiler"
        fi
    fi
    
    # Check Make
    if ! command -v make &> /dev/null; then
        log_error "Make not found. Please install GNU Make"
        exit 1
    fi
    
    log_success "All dependencies satisfied"
}

# Create build directories
setup_build_dirs() {
    log_info "Setting up build directories..."
    
    if [ "$CLEAN_BUILD" = true ]; then
        log_info "Cleaning previous build..."
        rm -rf "$BUILD_DIR"
    fi
    
    mkdir -p "$BUILD_DIR"
    mkdir -p "$RELEASE_DIR/linux-x86_64/bin"
    mkdir -p "$RELEASE_DIR/windows-x64/bin"
    
    log_success "Build directories ready"
}

# Build modern utilities
build_modern_utilities() {
    local platform="$1"
    local compiler="$2"
    local extension="$3"
    
    log_info "Building modern utilities for $platform..."
    
    cd "$MODERN_UTILS_DIR"
    
    # Define utilities to build
    local utilities=(
        "sb_guard"
        "sb_svcmgr"
        "sb_tracemgr"
        "sb_nbackup"
        "sb_gssplit"
        "sb_lock_print"
        "scratchbird"
    )
    
    local platform_specific_files=""
    local link_flags=""
    
    # Set platform-specific compilation options
    case $platform in
        "linux")
            platform_specific_files=""
            link_flags="-pthread"
            ;;
        "windows")
            platform_specific_files="_windows"
            link_flags="-lws2_32 -ladvapi32"
            ;;
    esac
    
    # Compile each utility
    for util in "${utilities[@]}"; do
        log_verbose "Compiling $util for $platform..."
        
        local source_file="${util}.cpp"
        local output_file="${util}${extension}"
        
        # Check for platform-specific source file
        if [ -f "${util}${platform_specific_files}.cpp" ]; then
            source_file="${util}${platform_specific_files}.cpp"
        fi
        
        # Special handling for scratchbird server
        if [ "$util" = "scratchbird" ] && [ "$platform" = "windows" ]; then
            link_flags="-lws2_32 -ladvapi32"
        fi
        
        # Compile the utility
        if [ "$VERBOSE" = true ]; then
            $compiler -std=c++17 -O2 -static -o "$output_file" "$source_file" $link_flags
        else
            $compiler -std=c++17 -O2 -static -o "$output_file" "$source_file" $link_flags 2>/dev/null
        fi
        
        if [ $? -eq 0 ]; then
            log_verbose "Successfully compiled $util"
        else
            log_error "Failed to compile $util"
            exit 1
        fi
    done
    
    log_success "Modern utilities built for $platform"
}

# Build legacy utilities using existing build system
build_legacy_utilities() {
    local platform="$1"
    
    log_info "Building legacy utilities for $platform..."
    
    cd "$SCRIPT_DIR"
    
    # Build core utilities using existing build system
    if [ "$platform" = "linux" ]; then
        log_verbose "Building Linux legacy utilities..."
        
        # Check if we need to build the main build system first
        if [ ! -f "gen/Release/scratchbird/bin/sb_gbak" ]; then
            log_info "Building core ScratchBird system..."
            make TARGET=Release external -j$JOBS
            make TARGET=Release sb_gbak sb_gfix sb_gsec sb_gstat sb_isql -j$JOBS
        fi
        
        # Copy legacy utilities
        cp gen/Release/scratchbird/bin/sb_gbak "$RELEASE_DIR/linux-x86_64/bin/"
        cp gen/Release/scratchbird/bin/sb_gfix "$RELEASE_DIR/linux-x86_64/bin/"
        cp gen/Release/scratchbird/bin/sb_gsec "$RELEASE_DIR/linux-x86_64/bin/"
        cp gen/Release/scratchbird/bin/sb_gstat "$RELEASE_DIR/linux-x86_64/bin/"
        cp gen/Release/scratchbird/bin/sb_isql "$RELEASE_DIR/linux-x86_64/bin/"
        
    elif [ "$platform" = "windows" ]; then
        log_verbose "Using existing Windows legacy utilities..."
        
        # Check if Windows utilities exist from previous builds
        if [ -f "$RELEASE_DIR/windows-x64/bin/sb_gbak.exe" ]; then
            log_verbose "Windows legacy utilities already exist"
        else
            log_warning "Windows legacy utilities not found. Please build them separately if needed."
        fi
    fi
    
    log_success "Legacy utilities processed for $platform"
}

# Copy utilities to release directories
copy_utilities() {
    local platform="$1"
    local extension="$2"
    
    log_info "Copying utilities to release directory for $platform..."
    
    cd "$MODERN_UTILS_DIR"
    
    local target_dir=""
    case $platform in
        "linux")
            target_dir="$RELEASE_DIR/linux-x86_64/bin"
            ;;
        "windows")
            target_dir="$RELEASE_DIR/windows-x64/bin"
            ;;
    esac
    
    # Copy modern utilities
    cp sb_guard${extension} "$target_dir/"
    cp sb_svcmgr${extension} "$target_dir/"
    cp sb_tracemgr${extension} "$target_dir/"
    cp sb_nbackup${extension} "$target_dir/"
    cp sb_gssplit${extension} "$target_dir/"
    cp sb_lock_print${extension} "$target_dir/"
    cp scratchbird${extension} "$target_dir/"
    
    log_success "Utilities copied to $target_dir"
}

# Verify build results
verify_build() {
    log_info "Verifying build results..."
    
    local expected_utilities=(
        "sb_guard"
        "sb_svcmgr"
        "sb_tracemgr"
        "sb_nbackup"
        "sb_gssplit"
        "sb_lock_print"
        "scratchbird"
        "sb_gbak"
        "sb_gfix"
        "sb_gsec"
        "sb_gstat"
        "sb_isql"
    )
    
    # Check Linux utilities
    if [ "$WINDOWS_ONLY" = false ]; then
        log_verbose "Verifying Linux utilities..."
        local linux_dir="$RELEASE_DIR/linux-x86_64/bin"
        
        for util in "${expected_utilities[@]}"; do
            if [ ! -f "$linux_dir/$util" ]; then
                log_error "Missing Linux utility: $util"
                exit 1
            fi
            
            # Test version output
            if [ "$VERBOSE" = true ]; then
                local version_output=$($linux_dir/$util -z 2>/dev/null || echo "No version info")
                log_verbose "$util version: $version_output"
            fi
        done
        
        log_success "Linux utilities verified (${#expected_utilities[@]} utilities)"
    fi
    
    # Check Windows utilities
    if [ "$LINUX_ONLY" = false ]; then
        log_verbose "Verifying Windows utilities..."
        local windows_dir="$RELEASE_DIR/windows-x64/bin"
        
        for util in "${expected_utilities[@]}"; do
            if [ ! -f "$windows_dir/$util.exe" ]; then
                log_error "Missing Windows utility: $util.exe"
                exit 1
            fi
        done
        
        log_success "Windows utilities verified (${#expected_utilities[@]} utilities)"
    fi
}

# Main build process
main() {
    log_info "Starting ScratchBird v${SCRATCHBIRD_VERSION} build process..."
    log_info "Build version: ${BUILD_VERSION}"
    
    # Check dependencies
    check_dependencies
    
    # Setup build directories
    setup_build_dirs
    
    # Build for Linux
    if [ "$WINDOWS_ONLY" = false ]; then
        build_modern_utilities "linux" "g++" ""
        build_legacy_utilities "linux"
        copy_utilities "linux" ""
    fi
    
    # Build for Windows
    if [ "$LINUX_ONLY" = false ]; then
        build_modern_utilities "windows" "x86_64-w64-mingw32-g++" ".exe"
        build_legacy_utilities "windows"
        copy_utilities "windows" ".exe"
    fi
    
    # Verify build results
    verify_build
    
    # Final summary
    log_success "Build completed successfully!"
    log_info "Release directories:"
    if [ "$WINDOWS_ONLY" = false ]; then
        log_info "  Linux x86_64: $RELEASE_DIR/linux-x86_64/bin/"
        log_info "    $(ls -1 "$RELEASE_DIR/linux-x86_64/bin/" | wc -l) utilities"
    fi
    if [ "$LINUX_ONLY" = false ]; then
        log_info "  Windows x64:  $RELEASE_DIR/windows-x64/bin/"
        log_info "    $(ls -1 "$RELEASE_DIR/windows-x64/bin/" | wc -l) utilities"
    fi
    
    log_info "Build completed at $(date)"
}

# Run main function
main "$@"