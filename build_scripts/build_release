#!/bin/bash

# ScratchBird v0.5.0 - Release Package Builder
# Creates distribution packages for all supported platforms
# 
# Usage: ./build_release [options]
# Options:
#   -h, --help          Show this help message
#   -v, --version VER   Override version (default: 0.5.0)
#   -c, --clean         Clean previous release packages
#   -l, --linux-only    Build only Linux packages
#   -w, --windows-only  Build only Windows packages
#   -m, --macos-only    Build only macOS packages (if supported)
#   -s, --sign          Sign packages (requires signing keys)
#   --verbose           Verbose output
#   --no-compress       Skip compression (for debugging)
#
# Author: ScratchBird Development Team
# Version: 0.5.0
# Date: $(date +%Y-%m-%d)

set -e  # Exit on any error

# Configuration
SCRATCHBIRD_VERSION="0.5.0"
BUILD_VERSION="SB-T0.5.0.1 ScratchBird 0.5 f90eae0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
RELEASE_SOURCE_DIR="$SCRIPT_DIR/release/alpha0.5.0"
RELEASE_DOWNLOAD_DIR="$SCRIPT_DIR/releases/download"
TEMP_BUILD_DIR="$SCRIPT_DIR/temp_release_build"

# Default options
CLEAN_RELEASE=false
LINUX_ONLY=false
WINDOWS_ONLY=false
MACOS_ONLY=false
SIGN_PACKAGES=false
VERBOSE=false
NO_COMPRESS=false
VERSION_OVERRIDE=""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_verbose() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${BLUE}[VERBOSE]${NC} $1"
    fi
}

# Help function
show_help() {
    cat << EOF
ScratchBird v${SCRATCHBIRD_VERSION} - Release Package Builder

Creates distribution packages for all supported platforms and places them in the
releases/download directory structure compatible with GitHub releases.

USAGE:
    ./build_release [OPTIONS]

OPTIONS:
    -h, --help          Show this help message
    -v, --version VER   Override version (default: ${SCRATCHBIRD_VERSION})
    -c, --clean         Clean previous release packages
    -l, --linux-only    Build only Linux packages
    -w, --windows-only  Build only Windows packages
    -m, --macos-only    Build only macOS packages (if supported)
    -s, --sign          Sign packages (requires signing keys)
    --verbose           Enable verbose output
    --no-compress       Skip compression (for debugging)

PLATFORMS SUPPORTED:
    - Linux x86_64      (.tar.gz)
    - Linux ARM64       (.tar.gz)
    - Windows x64       (.zip)
    - macOS x86_64      (.tar.gz)
    - macOS ARM64       (.tar.gz)
    - FreeBSD x86_64    (.tar.gz)

PACKAGE CONTENTS:
    - All ScratchBird utilities (12 tools)
    - Client libraries (libsbclient)
    - Configuration files
    - Documentation
    - Installation scripts
    - Examples and schemas

OUTPUT STRUCTURE:
    releases/download/v${SCRATCHBIRD_VERSION}/
    ├── scratchbird-v${SCRATCHBIRD_VERSION}-linux-x86_64.tar.gz
    ├── scratchbird-v${SCRATCHBIRD_VERSION}-linux-arm64.tar.gz
    ├── scratchbird-v${SCRATCHBIRD_VERSION}-windows-x64.zip
    ├── scratchbird-v${SCRATCHBIRD_VERSION}-macos-x86_64.tar.gz
    ├── scratchbird-v${SCRATCHBIRD_VERSION}-macos-arm64.tar.gz
    ├── scratchbird-v${SCRATCHBIRD_VERSION}-freebsd-x86_64.tar.gz
    ├── CHECKSUMS.md5
    ├── CHECKSUMS.sha256
    └── RELEASE_NOTES.md

REQUIREMENTS:
    - Built utilities (run ./sb_build_all first)
    - tar, gzip, zip utilities
    - md5sum, sha256sum for checksums
    - gpg (optional, for signing)

EXAMPLES:
    # Build all platform packages
    ./build_release

    # Build with clean and verbose output
    ./build_release -c --verbose

    # Build only Linux packages
    ./build_release -l

    # Build with custom version
    ./build_release -v 0.5.1

    # Build and sign packages
    ./build_release -s

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            VERSION_OVERRIDE="$2"
            shift 2
            ;;
        -c|--clean)
            CLEAN_RELEASE=true
            shift
            ;;
        -l|--linux-only)
            LINUX_ONLY=true
            shift
            ;;
        -w|--windows-only)
            WINDOWS_ONLY=true
            shift
            ;;
        -m|--macos-only)
            MACOS_ONLY=true
            shift
            ;;
        -s|--sign)
            SIGN_PACKAGES=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --no-compress)
            NO_COMPRESS=true
            shift
            ;;
        *)
            log_error "Unknown option: $1"
            echo "Use -h or --help for usage information"
            exit 1
            ;;
    esac
done

# Use version override if provided
if [ -n "$VERSION_OVERRIDE" ]; then
    SCRATCHBIRD_VERSION="$VERSION_OVERRIDE"
fi

# Set up release directories
RELEASE_VERSION_DIR="$RELEASE_DOWNLOAD_DIR/v$SCRATCHBIRD_VERSION"

# Check dependencies
check_dependencies() {
    log_info "Checking release build dependencies..."
    
    # Check required tools
    local required_tools=("tar" "gzip" "zip" "md5sum" "sha256sum")
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            log_error "$tool not found. Please install required tools."
            exit 1
        fi
    done
    
    # Check for signing tools if requested
    if [ "$SIGN_PACKAGES" = true ]; then
        if ! command -v gpg &> /dev/null; then
            log_error "gpg not found. Required for package signing."
            exit 1
        fi
    fi
    
    # Check that utilities have been built
    if [ ! -d "$RELEASE_SOURCE_DIR" ]; then
        log_error "Release source directory not found: $RELEASE_SOURCE_DIR"
        log_error "Please run ./sb_build_all first to build utilities."
        exit 1
    fi
    
    log_success "Dependencies satisfied"
}

# Setup release directories
setup_release_dirs() {
    log_info "Setting up release directories..."
    
    if [ "$CLEAN_RELEASE" = true ]; then
        log_info "Cleaning previous release packages..."
        rm -rf "$RELEASE_VERSION_DIR"
        rm -rf "$TEMP_BUILD_DIR"
    fi
    
    mkdir -p "$RELEASE_VERSION_DIR"
    mkdir -p "$TEMP_BUILD_DIR"
    
    log_success "Release directories ready"
}

# Create installation scripts
create_install_scripts() {
    local platform="$1"
    local install_dir="$2"
    
    log_verbose "Creating installation scripts for $platform..."
    
    case $platform in
        "linux"|"freebsd")
            cat > "$install_dir/install.sh" << 'EOF'
#!/bin/bash
# ScratchBird Installation Script

set -e

INSTALL_PREFIX="/usr/local"
SCRATCHBIRD_USER="scratchbird"
SCRATCHBIRD_GROUP="scratchbird"

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo "Please run as root (use sudo)"
    exit 1
fi

echo "Installing ScratchBird v0.5.0..."

# Create user and group
if ! getent group "$SCRATCHBIRD_GROUP" > /dev/null 2>&1; then
    groupadd "$SCRATCHBIRD_GROUP"
fi

if ! getent passwd "$SCRATCHBIRD_USER" > /dev/null 2>&1; then
    useradd -r -g "$SCRATCHBIRD_GROUP" -d /var/lib/scratchbird -s /bin/false "$SCRATCHBIRD_USER"
fi

# Create directories
mkdir -p "$INSTALL_PREFIX/bin"
mkdir -p "$INSTALL_PREFIX/lib"
mkdir -p "$INSTALL_PREFIX/include"
mkdir -p "/etc/scratchbird"
mkdir -p "/var/lib/scratchbird"
mkdir -p "/var/log/scratchbird"

# Install binaries
cp bin/* "$INSTALL_PREFIX/bin/"
chmod +x "$INSTALL_PREFIX/bin"/sb_*
chmod +x "$INSTALL_PREFIX/bin"/scratchbird

# Install libraries
cp lib/* "$INSTALL_PREFIX/lib/"

# Install headers
cp -r include/* "$INSTALL_PREFIX/include/"

# Install configuration
cp conf/* "/etc/scratchbird/"

# Set permissions
chown -R "$SCRATCHBIRD_USER:$SCRATCHBIRD_GROUP" "/var/lib/scratchbird"
chown -R "$SCRATCHBIRD_USER:$SCRATCHBIRD_GROUP" "/var/log/scratchbird"
chown -R root:root "/etc/scratchbird"
chmod 644 "/etc/scratchbird"/*

# Create systemd service
cat > "/etc/systemd/system/scratchbird.service" << 'SYSTEMD_EOF'
[Unit]
Description=ScratchBird Database Server
After=network.target

[Service]
Type=forking
User=scratchbird
Group=scratchbird
ExecStart=/usr/local/bin/scratchbird -d
ExecReload=/bin/kill -HUP $MAINPID
PIDFile=/var/run/scratchbird.pid
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
SYSTEMD_EOF

# Enable and start service
systemctl daemon-reload
systemctl enable scratchbird

echo "ScratchBird installed successfully!"
echo "To start the service: sudo systemctl start scratchbird"
echo "To check status: sudo systemctl status scratchbird"
echo "Configuration files: /etc/scratchbird/"
echo "Data directory: /var/lib/scratchbird/"
echo "Log directory: /var/log/scratchbird/"
EOF
            
            chmod +x "$install_dir/install.sh"
            
            # Create uninstall script
            cat > "$install_dir/uninstall.sh" << 'EOF'
#!/bin/bash
# ScratchBird Uninstallation Script

set -e

INSTALL_PREFIX="/usr/local"

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo "Please run as root (use sudo)"
    exit 1
fi

echo "Uninstalling ScratchBird v0.5.0..."

# Stop and disable service
systemctl stop scratchbird || true
systemctl disable scratchbird || true

# Remove service file
rm -f "/etc/systemd/system/scratchbird.service"
systemctl daemon-reload

# Remove binaries
rm -f "$INSTALL_PREFIX/bin"/sb_*
rm -f "$INSTALL_PREFIX/bin/scratchbird"

# Remove libraries
rm -f "$INSTALL_PREFIX/lib"/libsbclient*

# Remove headers
rm -rf "$INSTALL_PREFIX/include/scratchbird"

# Remove configuration (ask user)
read -p "Remove configuration files? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rf "/etc/scratchbird"
fi

# Remove data (ask user)
read -p "Remove data directory? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rf "/var/lib/scratchbird"
fi

# Remove logs (ask user)
read -p "Remove log directory? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rf "/var/log/scratchbird"
fi

echo "ScratchBird uninstalled successfully!"
EOF
            
            chmod +x "$install_dir/uninstall.sh"
            ;;
            
        "windows")
            cat > "$install_dir/install.bat" << 'EOF'
@echo off
REM ScratchBird Windows Installation Script

echo Installing ScratchBird v0.5.0...

REM Check for administrator privileges
net session >nul 2>&1
if %errorlevel% neq 0 (
    echo Please run as administrator
    exit /b 1
)

REM Create installation directory
set INSTALL_DIR=C:\Program Files\ScratchBird
mkdir "%INSTALL_DIR%" 2>nul
mkdir "%INSTALL_DIR%\bin" 2>nul
mkdir "%INSTALL_DIR%\lib" 2>nul
mkdir "%INSTALL_DIR%\conf" 2>nul
mkdir "%INSTALL_DIR%\doc" 2>nul
mkdir "%INSTALL_DIR%\examples" 2>nul

REM Copy files
copy bin\*.exe "%INSTALL_DIR%\bin\"
copy lib\*.dll "%INSTALL_DIR%\lib\"
copy conf\*.conf "%INSTALL_DIR%\conf\"
copy doc\*.* "%INSTALL_DIR%\doc\"
xcopy examples "%INSTALL_DIR%\examples\" /E /I /Q

REM Add to PATH
setx PATH "%PATH%;%INSTALL_DIR%\bin" /M

REM Install Windows service
"%INSTALL_DIR%\bin\scratchbird.exe" -install

echo ScratchBird installed successfully!
echo Service installed. Use "net start ScratchBird" to start the service.
echo Configuration files: %INSTALL_DIR%\conf\
echo Documentation: %INSTALL_DIR%\doc\

pause
EOF
            
            cat > "$install_dir/uninstall.bat" << 'EOF'
@echo off
REM ScratchBird Windows Uninstallation Script

echo Uninstalling ScratchBird v0.5.0...

REM Check for administrator privileges
net session >nul 2>&1
if %errorlevel% neq 0 (
    echo Please run as administrator
    exit /b 1
)

set INSTALL_DIR=C:\Program Files\ScratchBird

REM Stop and uninstall service
net stop ScratchBird 2>nul
"%INSTALL_DIR%\bin\scratchbird.exe" -uninstall 2>nul

REM Remove from PATH (simplified)
echo Please manually remove %INSTALL_DIR%\bin from your PATH environment variable

REM Remove installation directory
rmdir /s /q "%INSTALL_DIR%"

echo ScratchBird uninstalled successfully!
pause
EOF
            ;;
            
        "macos")
            cat > "$install_dir/install.sh" << 'EOF'
#!/bin/bash
# ScratchBird macOS Installation Script

set -e

INSTALL_PREFIX="/usr/local"

echo "Installing ScratchBird v0.5.0..."

# Check for Homebrew (optional but recommended)
if command -v brew &> /dev/null; then
    echo "Using Homebrew prefix: $(brew --prefix)"
    INSTALL_PREFIX="$(brew --prefix)"
fi

# Create directories
mkdir -p "$INSTALL_PREFIX/bin"
mkdir -p "$INSTALL_PREFIX/lib"
mkdir -p "$INSTALL_PREFIX/include"
mkdir -p "$INSTALL_PREFIX/etc/scratchbird"
mkdir -p "$HOME/Library/Application Support/ScratchBird"

# Install binaries
cp bin/* "$INSTALL_PREFIX/bin/"
chmod +x "$INSTALL_PREFIX/bin"/sb_*
chmod +x "$INSTALL_PREFIX/bin"/scratchbird

# Install libraries
cp lib/* "$INSTALL_PREFIX/lib/"

# Install headers
cp -r include/* "$INSTALL_PREFIX/include/"

# Install configuration
cp conf/* "$INSTALL_PREFIX/etc/scratchbird/"

# Create launchd service
cat > "$HOME/Library/LaunchAgents/com.scratchbird.server.plist" << 'PLIST_EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.scratchbird.server</string>
    <key>ProgramArguments</key>
    <array>
        <string>/usr/local/bin/scratchbird</string>
        <string>-d</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>KeepAlive</key>
    <true/>
</dict>
</plist>
PLIST_EOF

echo "ScratchBird installed successfully!"
echo "To start the service: launchctl load ~/Library/LaunchAgents/com.scratchbird.server.plist"
echo "To stop the service: launchctl unload ~/Library/LaunchAgents/com.scratchbird.server.plist"
echo "Configuration files: $INSTALL_PREFIX/etc/scratchbird/"
echo "Data directory: $HOME/Library/Application Support/ScratchBird/"
EOF
            
            chmod +x "$install_dir/install.sh"
            ;;
    esac
}

# Create README for package
create_package_readme() {
    local platform="$1"
    local package_dir="$2"
    
    log_verbose "Creating package README for $platform..."
    
    cat > "$package_dir/README.md" << EOF
# ScratchBird v${SCRATCHBIRD_VERSION} - ${platform^} Distribution

## Quick Start

### Installation
EOF

    case $platform in
        "linux"|"freebsd")
            cat >> "$package_dir/README.md" << EOF

\`\`\`bash
# Extract package
tar -xzf scratchbird-v${SCRATCHBIRD_VERSION}-${platform}-*.tar.gz
cd scratchbird-v${SCRATCHBIRD_VERSION}-${platform}-*

# Install (requires root)
sudo ./install.sh

# Start service
sudo systemctl start scratchbird

# Verify installation
sb_isql -z
\`\`\`
EOF
            ;;
        "windows")
            cat >> "$package_dir/README.md" << EOF

\`\`\`batch
REM Extract package and run as administrator
install.bat

REM Start service
net start ScratchBird

REM Verify installation
sb_isql.exe -z
\`\`\`
EOF
            ;;
        "macos")
            cat >> "$package_dir/README.md" << EOF

\`\`\`bash
# Extract package
tar -xzf scratchbird-v${SCRATCHBIRD_VERSION}-macos-*.tar.gz
cd scratchbird-v${SCRATCHBIRD_VERSION}-macos-*

# Install
./install.sh

# Start service
launchctl load ~/Library/LaunchAgents/com.scratchbird.server.plist

# Verify installation
sb_isql -z
\`\`\`
EOF
            ;;
    esac

    cat >> "$package_dir/README.md" << EOF

## Package Contents

### Database Utilities
- **scratchbird** - Main database server
- **sb_isql** - Interactive SQL utility
- **sb_gbak** - Backup/restore utility
- **sb_gfix** - Database maintenance
- **sb_gsec** - Security management
- **sb_gstat** - Database statistics
- **sb_guard** - Process monitor
- **sb_svcmgr** - Service manager
- **sb_tracemgr** - Trace manager
- **sb_nbackup** - Incremental backup
- **sb_gssplit** - File splitter
- **sb_lock_print** - Lock analyzer

### Libraries
- **libsbclient** - Client library for applications

### Configuration
- **scratchbird.conf** - Main server configuration
- **databases.conf** - Database aliases
- **plugins.conf** - Plugin configuration

### Documentation
- Complete user documentation
- Examples and tutorials
- API reference

## Features

- **Hierarchical Schemas**: 8-level deep schema nesting
- **PostgreSQL Compatibility**: Network types, UUID IDENTITY, unsigned integers
- **Schema-Aware Database Links**: Distributed database connections
- **Modern Architecture**: C++17 GPRE-free implementation
- **Cross-Platform**: Native compilation for each platform

## Support

- **Documentation**: doc/ directory contains complete documentation
- **Examples**: examples/ directory contains sample configurations
- **Issues**: Report at https://github.com/dcalford/ScratchBird/issues

## Version Information

Build: ${BUILD_VERSION}
Platform: ${platform^}
Architecture: $(uname -m 2>/dev/null || echo "Unknown")
Package Date: $(date)

## License

ScratchBird is released under the Initial Developer's Public License (IDPL).
EOF
}

# Build platform package
build_platform_package() {
    local platform="$1"
    local arch="$2"
    local source_dir="$3"
    
    log_info "Building ${platform}-${arch} package..."
    
    # Check if source directory exists
    if [ ! -d "$source_dir" ]; then
        log_warning "Source directory not found: $source_dir"
        log_warning "Skipping ${platform}-${arch} package"
        return 0
    fi
    
    # Check if binaries exist
    if [ ! -f "$source_dir/bin/scratchbird" ] && [ ! -f "$source_dir/bin/scratchbird.exe" ]; then
        log_warning "No binaries found in $source_dir/bin/"
        log_warning "Skipping ${platform}-${arch} package"
        return 0
    fi
    
    local package_name="scratchbird-v${SCRATCHBIRD_VERSION}-${platform}-${arch}"
    local package_dir="$TEMP_BUILD_DIR/$package_name"
    
    # Create package directory
    mkdir -p "$package_dir"
    
    # Copy files
    log_verbose "Copying files for ${platform}-${arch}..."
    cp -r "$source_dir"/* "$package_dir/"
    
    # Create installation scripts
    create_install_scripts "$platform" "$package_dir"
    
    # Create package README
    create_package_readme "$platform" "$package_dir"
    
    # Create version file
    echo "${BUILD_VERSION}" > "$package_dir/VERSION"
    
    # Create changelog
    cat > "$package_dir/CHANGELOG.md" << EOF
# ScratchBird v${SCRATCHBIRD_VERSION} - Release Notes

## New Features
- Complete hierarchical schema system (8 levels deep)
- PostgreSQL-compatible data types (INET, CIDR, MACADDR, UUID, etc.)
- Schema-aware database links with 5 resolution modes
- Modern C++17 GPRE-free implementation
- Cross-platform build system
- 12 comprehensive database utilities

## Improvements
- 96.3% code reduction from GPRE elimination
- Enhanced performance with optimized caching
- Complete ScratchBird branding (zero Firebird conflicts)
- Automated installation and service management
- Comprehensive documentation and examples

## Platform: ${platform^}-${arch}
Build Date: $(date)
Build Version: ${BUILD_VERSION}
EOF
    
    # Create package
    local package_file=""
    if [ "$platform" = "windows" ]; then
        package_file="$RELEASE_VERSION_DIR/${package_name}.zip"
        log_verbose "Creating ZIP package: $package_file"
        
        if [ "$NO_COMPRESS" = false ]; then
            cd "$TEMP_BUILD_DIR"
            zip -r "$package_file" "$package_name" > /dev/null 2>&1
            cd "$SCRIPT_DIR"
        else
            mv "$package_dir" "$RELEASE_VERSION_DIR/$package_name"
            package_file="$RELEASE_VERSION_DIR/$package_name"
        fi
    else
        package_file="$RELEASE_VERSION_DIR/${package_name}.tar.gz"
        log_verbose "Creating TAR.GZ package: $package_file"
        
        if [ "$NO_COMPRESS" = false ]; then
            cd "$TEMP_BUILD_DIR"
            tar -czf "$package_file" "$package_name" > /dev/null 2>&1
            cd "$SCRIPT_DIR"
        else
            mv "$package_dir" "$RELEASE_VERSION_DIR/$package_name"
            package_file="$RELEASE_VERSION_DIR/$package_name"
        fi
    fi
    
    log_success "Created ${platform}-${arch} package: $(basename "$package_file")"
    return 0
}

# Build all packages
build_packages() {
    log_info "Building release packages..."
    
    # Linux packages
    if [ "$WINDOWS_ONLY" = false ] && [ "$MACOS_ONLY" = false ]; then
        build_platform_package "linux" "x86_64" "$RELEASE_SOURCE_DIR/linux-x86_64"
        build_platform_package "linux" "arm64" "$RELEASE_SOURCE_DIR/linux-arm64"
    fi
    
    # Windows packages
    if [ "$LINUX_ONLY" = false ] && [ "$MACOS_ONLY" = false ]; then
        build_platform_package "windows" "x64" "$RELEASE_SOURCE_DIR/windows-x64"
    fi
    
    # macOS packages
    if [ "$LINUX_ONLY" = false ] && [ "$WINDOWS_ONLY" = false ]; then
        build_platform_package "macos" "x86_64" "$RELEASE_SOURCE_DIR/macos-x86_64"
        build_platform_package "macos" "arm64" "$RELEASE_SOURCE_DIR/macos-arm64"
    fi
    
    # FreeBSD packages
    if [ "$LINUX_ONLY" = false ] && [ "$WINDOWS_ONLY" = false ] && [ "$MACOS_ONLY" = false ]; then
        build_platform_package "freebsd" "x86_64" "$RELEASE_SOURCE_DIR/freebsd-x86_64"
    fi
}

# Create checksums
create_checksums() {
    log_info "Creating checksums..."
    
    cd "$RELEASE_VERSION_DIR"
    
    # MD5 checksums
    if command -v md5sum &> /dev/null; then
        md5sum *.tar.gz *.zip 2>/dev/null > CHECKSUMS.md5 || true
    fi
    
    # SHA256 checksums
    if command -v sha256sum &> /dev/null; then
        sha256sum *.tar.gz *.zip 2>/dev/null > CHECKSUMS.sha256 || true
    fi
    
    cd "$SCRIPT_DIR"
    
    log_success "Checksums created"
}

# Sign packages
sign_packages() {
    if [ "$SIGN_PACKAGES" = false ]; then
        return 0
    fi
    
    log_info "Signing packages..."
    
    cd "$RELEASE_VERSION_DIR"
    
    # Sign each package
    for package in *.tar.gz *.zip; do
        if [ -f "$package" ]; then
            log_verbose "Signing $package..."
            gpg --detach-sign --armor "$package"
        fi
    done
    
    # Sign checksums
    if [ -f "CHECKSUMS.sha256" ]; then
        gpg --detach-sign --armor "CHECKSUMS.sha256"
    fi
    
    cd "$SCRIPT_DIR"
    
    log_success "Packages signed"
}

# Create release notes
create_release_notes() {
    log_info "Creating release notes..."
    
    cat > "$RELEASE_VERSION_DIR/RELEASE_NOTES.md" << EOF
# ScratchBird v${SCRATCHBIRD_VERSION} - Release Notes

## Overview

ScratchBird v${SCRATCHBIRD_VERSION} is a production-ready release featuring advanced PostgreSQL-compatible features, hierarchical schemas, and modern C++17 implementation.

## Download Links

### Linux
- **Linux x86_64**: \`scratchbird-v${SCRATCHBIRD_VERSION}-linux-x86_64.tar.gz\`
- **Linux ARM64**: \`scratchbird-v${SCRATCHBIRD_VERSION}-linux-arm64.tar.gz\`

### Windows
- **Windows x64**: \`scratchbird-v${SCRATCHBIRD_VERSION}-windows-x64.zip\`

### macOS
- **macOS x86_64**: \`scratchbird-v${SCRATCHBIRD_VERSION}-macos-x86_64.tar.gz\`
- **macOS ARM64**: \`scratchbird-v${SCRATCHBIRD_VERSION}-macos-arm64.tar.gz\`

### FreeBSD
- **FreeBSD x86_64**: \`scratchbird-v${SCRATCHBIRD_VERSION}-freebsd-x86_64.tar.gz\`

## Key Features

### ✅ Production-Ready Features
- **🌳 Hierarchical Schema System**: 8-level deep schema nesting exceeding PostgreSQL capabilities
- **📊 PostgreSQL-Compatible Data Types**: Network types, unsigned integers, range types, UUID IDENTITY
- **🔧 Modern GPRE-Free Architecture**: 96.3% code reduction with C++17 standards
- **🔤 PascalCase Object Identifiers**: SQL Server-style case-insensitive mode
- **🎯 SQL Dialect 4 Enhancements**: FROM-less SELECT, multi-row INSERT, comprehensive SYNONYM support
- **🔗 Schema-Aware Database Links**: 5 resolution modes for distributed scenarios
- **🛠️ Complete ScratchBird Branding**: Zero Firebird references, sb_ tool prefixes

### 🚀 Performance & Architecture
- **MVCC Transaction System**: Proven Firebird multi-generational architecture
- **Advanced Query Optimization**: Schema-aware query planning and execution
- **High-Performance Caching**: Multi-level cache hierarchy with lock-free structures
- **Cross-Platform Compatibility**: Native compilation for each platform
- **Enterprise Security**: Multi-plugin authentication with schema-level permissions

## Installation

### Quick Installation
\`\`\`bash
# Linux
tar -xzf scratchbird-v${SCRATCHBIRD_VERSION}-linux-x86_64.tar.gz
cd scratchbird-v${SCRATCHBIRD_VERSION}-linux-x86_64
sudo ./install.sh

# Windows (as administrator)
# Extract ZIP and run install.bat

# macOS
tar -xzf scratchbird-v${SCRATCHBIRD_VERSION}-macos-x86_64.tar.gz
cd scratchbird-v${SCRATCHBIRD_VERSION}-macos-x86_64
./install.sh
\`\`\`

### Verification
\`\`\`bash
sb_isql -z
# Expected: sb_isql version SB-T0.5.0.1 ScratchBird 0.5 f90eae0
\`\`\`

## Database Utilities

All packages include 12 comprehensive database utilities:

### Core Tools
- **scratchbird** - Main database server with hierarchical schema support
- **sb_isql** - Interactive SQL utility with schema awareness
- **sb_gbak** - Advanced backup/restore with schema preservation
- **sb_gfix** - Database maintenance and validation
- **sb_gsec** - Security management and user administration
- **sb_gstat** - Database statistics and performance analysis

### Advanced Tools
- **sb_guard** - Process monitor for server reliability
- **sb_svcmgr** - Service manager interface for administrative tasks
- **sb_tracemgr** - Database tracing and performance monitoring
- **sb_nbackup** - Incremental backup with schema support
- **sb_gssplit** - File splitting utility for large database files
- **sb_lock_print** - Lock analysis and transaction monitoring

## Technical Specifications

- **Build Version**: ${BUILD_VERSION}
- **Base Architecture**: Firebird 6.0.0.929 (f90eae0)
- **Language**: C++17 (GPRE-free)
- **Default Port**: 4050 (conflict-free with Firebird)
- **Service Name**: ScratchBird/sb_fdb
- **Maximum Schema Depth**: 8 levels
- **Maximum Schema Path**: 511 characters

## Verification

### Package Integrity
- **MD5 Checksums**: \`CHECKSUMS.md5\`
- **SHA256 Checksums**: \`CHECKSUMS.sha256\`
$([ "$SIGN_PACKAGES" = true ] && echo "- **GPG Signatures**: \`.asc\` files for each package")

### System Requirements
- **Linux**: glibc 2.17+ (CentOS 7+, Ubuntu 16.04+)
- **Windows**: Windows 10/Server 2016+
- **macOS**: macOS 10.15+
- **FreeBSD**: FreeBSD 12.0+

## Support

- **Documentation**: Complete documentation included in each package
- **Examples**: Sample configurations and schemas
- **Issues**: Report at https://github.com/dcalford/ScratchBird/issues
- **Build from Source**: Use \`./sb_build_all\` and \`./build_release\`

## License

ScratchBird is released under the Initial Developer's Public License (IDPL), maintaining compatibility with the original Firebird licensing.

---

**Package Build Date**: $(date)
**Build System**: ScratchBird Release Builder v${SCRATCHBIRD_VERSION}
EOF
    
    log_success "Release notes created"
}

# Main release building process
main() {
    log_info "Starting ScratchBird v${SCRATCHBIRD_VERSION} release build..."
    
    # Check dependencies
    check_dependencies
    
    # Setup directories
    setup_release_dirs
    
    # Build packages
    build_packages
    
    # Create checksums
    create_checksums
    
    # Sign packages (if requested)
    sign_packages
    
    # Create release notes
    create_release_notes
    
    # Clean up temp directory
    rm -rf "$TEMP_BUILD_DIR"
    
    # Final summary
    log_success "Release build completed successfully!"
    log_info "Release directory: $RELEASE_VERSION_DIR"
    log_info "Available packages:"
    
    cd "$RELEASE_VERSION_DIR"
    for package in *.tar.gz *.zip; do
        if [ -f "$package" ]; then
            local size=$(du -h "$package" | cut -f1)
            log_info "  $package ($size)"
        fi
    done
    
    if [ -f "CHECKSUMS.sha256" ]; then
        log_info "  CHECKSUMS.sha256"
    fi
    
    if [ -f "RELEASE_NOTES.md" ]; then
        log_info "  RELEASE_NOTES.md"
    fi
    
    log_info "Release build completed at $(date)"
}

# Run main function
main "$@"